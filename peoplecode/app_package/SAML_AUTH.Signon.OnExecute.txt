import SAML_AUTH:Operator;
import SAML_AUTH:CustomSignonInterface;
import SAML_AUTH:CommonInterface;
import SAML_AUTH:SAMLAuthData;

class Signon
   method Signon(&inputOptions As SAML_AUTH:CustomSignonInterface, &inputCommon As SAML_AUTH:CommonInterface);
   method generateSAMLAuthRequestURL() Returns string;
   method failSignon(&reason As string);
   method completeSignon(&userID As string, &redirectURL As string);
   method getSAMLResponse(&samlXML As string) Returns XmlDoc;
   method getSAMLXML() Returns string;
   method validateSAMLSignature(&samlXML As string) Returns boolean;
   method validateSAMLTimeframe(&samlResponse As XmlDoc) Returns boolean;
   method getRedirectURL() Returns string;
   method processSAMLLogin();
   method process();
   method setAuthData(&authData As SAML_AUTH:SAMLAuthData);
   method isValidSwitch(&newUser As string) Returns boolean;
   method getValidOPRIDsForSAMLData() Returns array of SAML_AUTH:Operator;
   method getUserIDFromAuthData() Returns string;
   method shouldShowUserSelection() Returns boolean;
   
protected
   method convertJavaByteArrayToString(&javaArray As JavaObject) Returns string;
   method convertJavaArrayToArray(&javaArray As JavaObject) Returns array of any;
   
   property SAML_AUTH:CustomSignonInterface options;
   property SAML_AUTH:CommonInterface common;
end-class;

Global string &SAML_oldUserID;
Global SAML_AUTH:SAMLAuthData &SAML_authData;
Global string &SAML_relayURL;

method Signon
   /+ &inputOptions as SAML_AUTH:CustomSignonInterface, +/
   /+ &inputCommon as SAML_AUTH:CommonInterface +/
   %This.options = &inputOptions;
   %This.common = &inputCommon;
end-method;

method generateSAMLAuthRequestURL
   /+ Returns String +/
   Local JavaObject &SAMLGenerator = GetJavaClass("saml.saml.ADFSSAMLRequestGen");
   Local JavaObject &SAMLGenInstance = &SAMLGenerator.GetInstance();
   Local string &req = &SAMLGenInstance.buildRequest();
   If &req = "" Then
      %This.common.logMessage(%ApplicationLogFence_Error, "Error generating AuthnRequest: " | &SAMLGenInstance.getLogData());
      Return "";
   End-If;
   Return &SAMLGenInstance.getDestination() | "?SAMLRequest=" | &req;
end-method;

method failSignon
   /+ &reason as String +/
   %This.common.logMessage(%ApplicationLogFence_Level1, "Failing sign on because " | &reason);
   SetAuthenticationResult( False);
end-method;

method completeSignon
   /+ &userID as String, +/
   /+ &redirectURL as String +/
   &SAML_oldUserID = &userID;
   SetAuthenticationResult( True, &userID, &redirectURL, False);
end-method;

method getSAMLResponse
   /+ &samlXML as String +/
   /+ Returns XmlDoc +/
   If &samlXML = "" Then
      Return Null;
   End-If;
   
   &samlXML = "<?xml version=""1.0"" ?>" | &samlXML;
   Local XmlDoc &xmldoc = CreateXmlDoc(&samlXML);
   
   Return &xmldoc;
end-method;

method getSAMLXML
   /+ Returns String +/
   Local string &encodedResponse = %Request.GetParameter("SAMLResponse");
   If &encodedResponse = "" Then
      Return "";
   End-If;
   
   Local JavaObject &oEncoder = CreateJavaObject("com.peoplesoft.tools.util.Base64");
   Local string &decodeResult = %This.convertJavaByteArrayToString(&oEncoder.decode(&encodedResponse));
   
   If None(&decodeResult) Then
      %This.common.logMessage(%ApplicationLogFence_Error, "Error decoding SAML XML response.");
      Return "";
   End-If;
   
   %This.common.logMessage(%ApplicationLogFence_Level1, "Decoded SAML XML: " | &decodeResult);
   Return &decodeResult;
end-method;

method validateSAMLSignature
   /+ &samlXML as String +/
   /+ Returns Boolean +/
   Local JavaObject &SAMLValidatorClass = GetJavaClass("saml.saml.ADFSSAMLResponseValidator");
   Local JavaObject &SAMLValidator = &SAMLValidatorClass.GetInstance();
   Local boolean &valid = &SAMLValidator.ValidateSAMLResponse(&samlXML);
   %This.common.logMessage(%ApplicationLogFence_Level1, "Validation log data: " | &SAMLValidator.getLogData());
   
   Return &valid;
end-method;

method validateSAMLTimeframe
   /+ &samlResponse as XmlDoc +/
   /+ Returns Boolean +/
   /* Verify conditions if they exist */
   Local integer &i;
   Local array of XmlNode &xmlNodes = &samlResponse.GetElementsByTagName("Conditions");
   For &i = 1 To &xmlNodes.Len
      If &xmlNodes [&i].GetAttributeValue("NotOnOrAfter") <> "" Then
         Local datetime &validBefore = DateTimeValue(ISOToDateTime(&xmlNodes [&i].GetAttributeValue("NotOnOrAfter")));
         If %Datetime >= &validBefore Then
            %This.common.logMessage(%ApplicationLogFence_Error, "SAML validated, but was too old: " | &xmlNodes [&i].GetAttributeValue("NotOnOrAfter"));
            Return False;
         End-If;
      End-If;
      If &xmlNodes [&i].GetAttributeValue("NotBefore") <> "" Then
         Local datetime &validAfter = DateTimeValue(ISOToDateTime(&xmlNodes [&i].GetAttributeValue("NotBefore")));
         If %Datetime < &validAfter Then
            %This.common.logMessage(%ApplicationLogFence_Error, "SAML validated, but was too far into the future: " | &xmlNodes [&i].GetAttributeValue("NotBefore"));
            Return False;
         End-If;
      End-If;
   End-For;
   
   Return True;
end-method;

method process
   If %Request <> Null Then
      %This.common.logMessage(%ApplicationLogFence_Level1, "Signon code called from URI " | %Request.FullURI);
   End-If;
   %This.common.logMessage(%ApplicationLogFence_Level1, "Signon code called with user " | %SignonUserId);
   %This.common.logMessage(%ApplicationLogFence_Level1, "Signon code called with userid " | %UserId);
   %This.common.logMessage(%ApplicationLogFence_Level1, "Signon code called with old user " | &SAML_oldUserID);
   If %PSAuthResult Then
      %This.common.logMessage(%ApplicationLogFence_Level1, "PSAuthResult is TRUE");
   End-If;
   Local string &publicUser = &options.getPublicUser();
   
   /* Check if Login Successful and Public User */
   If %PSAuthResult = True And
         %SignonUserId = &publicUser Then
      %This.processSAMLLogin();
   End-If;
   
   /* If successful normal login */
   If %PSAuthResult = True And
         %SignonUserId <> &publicUser Then
      &SAML_oldUserID = %SignonUserId;
   End-If;
   
   /* If calling switch user with a blank password */
   If %PSAuthResult = False And
         &SAML_oldUserID <> "" Then
      If %This.isValidSwitch(%SignonUserId) Then
         &options.auditUserSwitch(&SAML_authData, &SAML_oldUserID, %SignonUserId);
         %This.completeSignon(%SignonUserId, %This.getRedirectURL());
      Else
         %This.failSignon("the user '" | &SAML_oldUserID | "' is not authorized to switch to '" | %SignonUserId | "'");
      End-If;
   End-If;
end-method;

method processSAMLLogin
   /* Check if a SAML response exists */
   Local string &xml = %This.getSAMLXML();
   
   If &xml = "" Then
      /* Do not fail sign on here, we must allow guest access if no SAML auth is attempted */
      %This.common.logMessage(%ApplicationLogFence_Level1, "No SAML response found, or SAML failed to decode, not setting authentication result");
      If Find("WEBLIB_SAML", %Request.FullURI) = 0 Then
         %This.failSignon("Deep link attempted, forcing signon");
      End-If;
      Return;
   End-If;
   
   Local XmlDoc &samlResponse = %This.getSAMLResponse(&xml);
   If &samlResponse = Null Then
      %This.failSignon("failed to parse the XML");
      Return;
   End-If;
   
   Local boolean &isValid;
   &isValid = %This.validateSAMLSignature(&xml);
   If Not &isValid Then
      %This.failSignon("failed to verify the SAML signature");
      Return;
   End-If;
   
   &isValid = %This.validateSAMLTimeframe(&samlResponse);
   If Not &isValid Then
      %This.failSignon("failed to verify the SAML timeframe");
      Return;
   End-If;
   
   %This.setAuthData(&options.getAuthDataFromResponse(&samlResponse));
   
   Local string &userID = %This.getUserIDFromAuthData();
   If &userID = "" Then
      %This.failSignon("failed to identify an OPRID from the SAML response");
      Return;
   End-If;
   
   %This.completeSignon(&userID, %This.getRedirectURL());
end-method;

method getRedirectURL
   /+ Returns String +/
   Local string &redirectURL = %Request.GetParameter("RelayState");
   If &redirectURL = "" Then
      /* If no RelayState parameter exists or if it's blank, use what was saved before */
      &redirectURL = &SAML_relayURL;
   End-If;
   
   If Find(&options.getUserSelectionURL(), %Request.FullURI) = 0 Then
      /* Save the true destination until after the user selection */
      &SAML_relayURL = &redirectURL;
      &redirectURL = &options.getUserSelectionURL();
   End-If;
   
   If &redirectURL = "" Then
      &redirectURL = &options.getDefaultRedirectURL(&SAML_authData);
   End-If;
   
   Return &redirectURL;
end-method;

method convertJavaByteArrayToString
   /+ &javaArray as JavaObject +/
   /+ Returns String +/
   Local array of any &convertedByteArray = %This.convertJavaArrayToArray(&javaArray);
   Local string &output = "";
   Local integer &i;
   
   For &i = 1 To &convertedByteArray.Len
      &output = &output | Char(&convertedByteArray [&i]);
   End-For;
   
   Return &output;
end-method;

method convertJavaArrayToArray
   /+ &javaArray as JavaObject +/
   /+ Returns Array of Any +/
   Local array of any &convertedByteArray = CreateArrayAny();
   If &javaArray.length > 0 Then
      &convertedByteArray [&javaArray.length] = Null;
      CopyFromJavaArray(&javaArray, &convertedByteArray);
   End-If;
   
   Return &convertedByteArray;
end-method;

method getUserIDFromAuthData
   /+ Returns String +/
   Local array of SAML_AUTH:Operator &validOprids = %This.getValidOPRIDsForSAMLData();
   If &validOprids.Len > 0 Then
      Return &validOprids [1].oprid;
   Else
      Return "";
   End-If;
end-method;

method setAuthData
   /+ &authData as SAML_AUTH:SAMLAuthData +/
   &SAML_authData = &authData;
   %This.common.logMessage(%ApplicationLogFence_Level1, "Setting auth data: " | &SAML_authData.toString());
end-method;

method getValidOPRIDsForSAMLData
   /+ Returns Array of SAML_AUTH:Operator +/
   Return &options.getValidOPRIDsForSAMLData(&SAML_authData);
end-method;

method isValidSwitch
   /+ &newUser as String +/
   /+ Returns Boolean +/
   If &options.allowUserSwitchOverride(&SAML_authData, &SAML_oldUserID, &newUser) Then
      Return True;
   End-If;
   
   Local integer &i;
   Local array of SAML_AUTH:Operator &validOprids = &options.getValidOPRIDsForSAMLData(&SAML_authData);
   For &i = 1 To &validOprids.Len
      If &validOprids [&i].oprid = &newUser And
            &validOprids [&i].acctLock = False Then
         Return True;
      End-If;
   End-For;
   Return False;
end-method;

method shouldShowUserSelection
   /+ Returns Boolean +/
   Return &options.shouldShowUserSelection(&SAML_authData);
end-method;

